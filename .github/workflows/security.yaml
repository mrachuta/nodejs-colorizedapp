name: Periodical secuirty analysis
run-name: PSA job triggered by ${{ github.event_name }} for ${{ github.ref_name }}
on:
  schedule:
    - cron: '37 21 * * 6'
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Not neded to specify branch: 
          # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
          fetch-depth: 0

      - name: Get latest release for nodejs-colorizedapp
        id: latest_release
        uses: pozetroninc/github-action-get-latest-release@master
        continue-on-error: true
        with:
          repository: ${{ github.repository }}

      - name: Generate image tag if latest release found
        if: ${{ steps.latest_release.outputs.release }}
        run: echo "TAG_TO_PULL=${{ steps.latest_release.outputs.release }}" >> "$GITHUB_ENV"

      - name: Generate image tag if no releases found
        if: ${{ ! steps.latest_release.outputs.release }}
        id: generated_tag
        run: echo "TAG_TO_PULL=${GITHUB_REF_NAME//\//_}-$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: SCA scan (nodejs packages)
        uses: actions/setup-node@v3
        id: sca_nodejs
        with:
          node-version: "20.10.0"
      - run: npm ci
      - run: ./node_modules/.bin/retire -v

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis & results to GitHub Security tab
        id: codeql
        uses: github/codeql-action/analyze@v3

      - name: SAST scan
        uses: bearer/bearer-action@v2
        id: sast
        continue-on-error: true
        with:
          format: sarif
          output: bearer-results.sarif

      - name: Upload SAST scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bearer-results.sarif
          category: SAST

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          # Global variable in GH
          login-server: ${{ vars.ACR_ADDRESS }}
          # Secrets in GH
          username: ${{ secrets.ACR_LOGIN }}
          password: ${{ secrets.ACR_PASS }}

      - name: Pull image from Azure Container Registry
        run: |
          docker pull ${{ vars.ACR_ADDRESS }}/nodejs-colorizedapp:${{ env.TAG_TO_PULL }}
      - name: SCA Scan (docker image)
        uses: aquasecurity/trivy-action@master
        id: sca_docker
        continue-on-error: true
        with:
          image-ref: '${{ vars.ACR_ADDRESS }}/nodejs-colorizedapp:${{ env.TAG_TO_PULL }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          scanners: 'vuln,secret,config'

      - name: Upload SCA scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: SCA

      # Catch previous failures and set status to FAILED
      - name: Set workflow status to FAILED
        if: steps.sca_nodejs.outcome != 'success' ||
          steps.codeql.outcome != 'success' ||
          steps.sast.outcome != 'success' ||
          steps.sca_docker.outcome != 'success'
        run: exit 1

      # TODO: create GH issue in case of failures
