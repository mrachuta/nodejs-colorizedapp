name: CD build
run-name: CD job triggered by ${{ github.triggering_actor }} on ${{ github.ref_name }}
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  call-ci-workflow:
    uses: ./.github/workflows/ci.yaml
    with:
      branch: ${{ github.ref_name }}

  call-security-scans-scm-workflow:
    uses: ./.github/workflows/security-scans-scm.yaml
    with:
      branch: ${{ github.ref_name }}
    needs: call-ci-workflow

  build-image:
    needs: call-security-scans-scm-workflow
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.customvars.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create image tag
        id: customvars
        run: |
          #!/usr/bin/env bash

          set -euo pipefail

          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
              echo 'This is build from tag.'
              echo "image_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/* ]]; then
              echo 'This is build from branch.'
              echo "image_tag=${GITHUB_REF_NAME//\//_}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          else
              echo 'Unknown ref type, failing build!'
          fi

      - name: Get app version from package.json
        uses: sergeysova/jq-action@v2
        id: packagejson
        with:
          cmd: |
            app_version=$(jq -r .version package.json)
            echo "app_version=${app_version}" >> $GITHUB_OUTPUT

      - name: Build an image from Dockerfile
        run: |
          docker build . \
          --build-arg "build_id=${{ steps.customvars.outputs.image_tag }}" \
          --build-arg "app_version=${{ steps.packagejson.outputs.app_version }}" \
          -t \
          ${{ vars.ACR_ADDRESS }}/nodejs-colorizedapp:${{ steps.customvars.outputs.image_tag }}
          docker save \
          ${{ vars.ACR_ADDRESS }}/nodejs-colorizedapp:${{ steps.customvars.outputs.image_tag }} \
          > /tmp/nodejs-colorizedapp_${{ steps.customvars.outputs.image_tag }}.tar

      - name: Upload docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-colorizedapp_${{ steps.customvars.outputs.image_tag }}
          path: /tmp/nodejs-colorizedapp_${{ steps.customvars.outputs.image_tag }}.tar

  call-security-scans-container-workflow:
    uses: ./.github/workflows/security-scans-container.yaml
    with:
      pull_image_from_registry: false
      image_tag: ${{ needs.build-image.outputs.image_tag }}
    needs: build-image

  push-image:
    needs: call-security-scans-container-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Download docker image stored as artifact
        if: ${{ ! inputs.pull_image_from_registry }}
        uses: actions/download-artifact@v4
        with:
          name: nodejs-colorizedapp_${{ needs.call-security-scans-container-workflow.outputs.image_tag }}
          path: /tmp

      - name: Load image
        if: ${{ ! inputs.pull_image_from_registry }}
        run: |
          docker load --input \
          /tmp/nodejs-colorizedapp_${{ needs.call-security-scans-container-workflow.outputs.image_tag }}.tar

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          # Global variable in GH
          registry: ${{ vars.ACR_ADDRESS }}
          # Secrets in GH
          username: ${{ secrets.ACR_LOGIN }}
          password: ${{ secrets.ACR_PASS }}

      - name: Push image to Azure Container Registry
        run: |
          docker push \
          ${{ vars.ACR_ADDRESS }}/nodejs-colorizedapp:${{ needs.call-security-scans-container-workflow.outputs.image_tag }}

      - name: Summary
        run: |
          echo "Following image was pushed to registry:"
          echo "${{ vars.ACR_ADDRESS }}/nodejs-colorizedapp:${{ needs.call-security-scans-container-workflow.outputs.image_tag }}"
